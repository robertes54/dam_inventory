Index: tethysapp-dam_inventory/tethysapp/dam_inventory/controllers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import messages\nfrom django.shortcuts import render, reverse, redirect\nfrom django.utils.html import format_html\nfrom tethys_sdk.permissions import login_required\nfrom tethys_sdk.gizmos import (Button, MapView, TextInput, DatePicker,\n                               SelectInput, DataTableView, MVDraw, MVView,\n                               MVLayer)\nfrom tethys_sdk.permissions import permission_required, has_permission\nfrom tethys_sdk.workspaces import app_workspace\nfrom .model import add_new_dam, get_all_dams, Dam, assign_hydrograph_to_dam, get_hydrograph\nfrom .app import DamInventory as app\nfrom .helpers import create_hydrograph\n\n\n\n@login_required()\ndef home(request):\n    \"\"\"\n    Controller for the app home page.\n    \"\"\"\n    # Get list of dams and create dams MVLayer:\n    dams = get_all_dams()\n    features = []\n    lat_list = []\n    lng_list = []\n\n    # Define GeoJSON Features\n    for dam in dams:\n        lat_list.append(dam.latitude)\n        lng_list.append(dam.longitude)\n\n        dam_feature = {\n            'type': 'Feature',\n            'geometry': {\n                'type': 'Point',\n                'coordinates': [dam.longitude, dam.latitude],\n            },\n            'properties': {\n                'id': dam.id,\n                'name': dam.name,\n                'owner': dam.owner,\n                'river': dam.river,\n                'date_built': dam.date_built\n            }\n        }\n\n        features.append(dam_feature)\n\n    # Define GeoJSON FeatureCollection\n    dams_feature_collection = {\n        'type': 'FeatureCollection',\n        'crs': {\n            'type': 'name',\n            'properties': {\n                'name': 'EPSG:4326'\n            }\n        },\n        'features': features\n    }\n\n    style = {'ol.style.Style': {\n        'image': {'ol.style.Circle': {\n            'radius': 10,\n            'fill': {'ol.style.Fill': {\n                'color':  '#d84e1f'\n            }},\n            'stroke': {'ol.style.Stroke': {\n                'color': '#ffffff',\n                'width': 1\n            }}\n        }}\n    }}\n\n    # Create a Map View Layer\n    dams_layer = MVLayer(\n        source='GeoJSON',\n        options=dams_feature_collection,\n        legend_title='Dams',\n        layer_options={'style': style},\n        feature_selection=True\n    )\n\n    # Define view centered on dam locations\n    try:\n        view_center = [sum(lng_list) / float(len(lng_list)), sum(lat_list) / float(len(lat_list))]\n    except ZeroDivisionError:\n        view_center = [-98.6, 39.8]\n\n    view_options = MVView(\n        projection='EPSG:4326',\n        center=view_center,\n        zoom=4.5,\n        maxZoom=18,\n        minZoom=2\n    )\n\n    dam_inventory_map = MapView(\n        height='100%',\n        width='100%',\n        layers=[dams_layer],\n        basemap='OpenStreetMap',\n        view=view_options\n    )\n\n    add_dam_button = Button(\n        display_text='Add Dam',\n        name='add-dam-button',\n        icon='glyphicon glyphicon-plus',\n        style='success',\n        href=reverse('dam_inventory:add_dam')\n    )\n\n    context = {\n        'dam_inventory_map': dam_inventory_map,\n        'add_dam_button': add_dam_button,\n        'can_add_dams': has_permission(request, 'add_dams')\n    }\n\n    return render(request, 'dam_inventory/home.html', context)\n\n\n@permission_required('add_dams')\ndef add_dam(request):\n    \"\"\"\n    Controller for the Add Dam page.\n    \"\"\"\n    # Default Values\n    name = ''\n    owner = 'Reclamation'\n    river = ''\n    date_built = ''\n    location = ''\n\n    # Errors\n    name_error = ''\n    owner_error = ''\n    river_error = ''\n    date_error = ''\n    location_error = ''\n\n    # Handle form submission\n    if request.POST and 'add-button' in request.POST:\n        # Get values\n        has_errors = False\n        name = request.POST.get('name', None)\n        owner = request.POST.get('owner', None)\n        river = request.POST.get('river', None)\n        date_built = request.POST.get('date-built', None)\n        location = request.POST.get('geometry', None)\n\n        # Validate\n        if not name:\n            has_errors = True\n            name_error = 'Name is required.'\n\n        if not owner:\n            has_errors = True\n            owner_error = 'Owner is required.'\n\n        if not river:\n            has_errors = True\n            river_error = 'River is required.'\n\n        if not date_built:\n            has_errors = True\n            date_error = 'Date Built is required.'\n\n        if not location:\n            has_errors = True\n            location_error = 'Location is required.'\n\n        if not has_errors:\n            # Get value of max_dams custom setting\n            max_dams = app.get_custom_setting('max_dams')\n\n            # Query database for count of dams\n            Session = app.get_persistent_store_database('primary_db', as_sessionmaker=True)\n            session = Session()\n            num_dams = session.query(Dam).count()\n\n            # Only add the dam if custom setting doesn't exist or we have not exceed max_dams\n            if not max_dams or num_dams < max_dams:\n                add_new_dam(location=location, name=name, owner=owner, river=river, date_built=date_built)\n            else:\n                messages.warning(request, 'Unable to add dam \"{0}\", because the inventory is full.'.format(name))\n\n            return redirect(reverse('dam_inventory:home'))\n\n        messages.error(request, \"Please fix errors.\")\n\n    # Define form gizmos\n    name_input = TextInput(\n        display_text='Name',\n        name='name',\n        initial=name,\n        error=name_error\n    )\n\n    owner_input = SelectInput(\n        display_text='Owner',\n        name='owner',\n        multiple=False,\n        options=[('Reclamation', 'Reclamation'), ('Army Corp', 'Army Corp'), ('Other', 'Other')],\n        initial=owner,\n        error=owner_error\n    )\n\n    river_input = TextInput(\n        display_text='River',\n        name='river',\n        placeholder='e.g.: Mississippi River',\n        initial=river,\n        error=river_error\n    )\n\n    date_built = DatePicker(\n        name='date-built',\n        display_text='Date Built',\n        autoclose=True,\n        format='MM d, yyyy',\n        start_view='decade',\n        today_button=True,\n        initial=date_built,\n        error=date_error\n    )\n\n    initial_view = MVView(\n        projection='EPSG:4326',\n        center=[-98.6, 39.8],\n        zoom=3.5\n    )\n\n    drawing_options = MVDraw(\n        controls=['Modify', 'Delete', 'Move', 'Point'],\n        initial='Point',\n        output_format='GeoJSON',\n        point_color='#FF0000'\n    )\n\n    location_input = MapView(\n        height='300px',\n        width='100%',\n        basemap='OpenStreetMap',\n        draw=drawing_options,\n        view=initial_view\n    )\n\n    add_button = Button(\n        display_text='Add',\n        name='add-button',\n        icon='glyphicon glyphicon-plus',\n        style='success',\n        attributes={'form': 'add-dam-form'},\n        submit=True\n    )\n\n    cancel_button = Button(\n        display_text='Cancel',\n        name='cancel-button',\n        href=reverse('dam_inventory:home')\n    )\n\n    context = {\n        'name_input': name_input,\n        'owner_input': owner_input,\n        'river_input': river_input,\n        'date_built_input': date_built,\n        'location_input': location_input,\n        'location_error': location_error,\n        'add_button': add_button,\n        'cancel_button': cancel_button,\n        'can_add_dams': has_permission(request, 'add_dams')\n    }\n\n    return render(request, 'dam_inventory/add_dam.html', context)\n\n\n\n@login_required()\ndef list_dams(request):\n    \"\"\"\n    Show all dams in a table view.\n    \"\"\"\n    dams = get_all_dams()\n    table_rows = []\n\n    for dam in dams:\n        hydrograph_id = get_hydrograph(dam.id)\n        if hydrograph_id:\n            url = reverse('dam_inventory:hydrograph', kwargs={'hydrograph_id': hydrograph_id})\n            dam_hydrograph = format_html('<a class=\"btn btn-primary\" href=\"{}\">Hydrograph Plot</a>'.format(url))\n        else:\n            dam_hydrograph = format_html('<a class=\"btn btn-primary disabled\" title=\"No hydrograph assigned\" '\n                                         'style=\"pointer-events: auto;\">Hydrograph Plot</a>')\n\n        table_rows.append(\n            (\n                dam.name, dam.owner,\n                dam.river, dam.date_built,\n                dam_hydrograph\n            )\n        )\n\n    dams_table = DataTableView(\n        column_names=('Name', 'Owner', 'River', 'Date Built', 'Hydrograph'),\n        rows=table_rows,\n        searching=False,\n        orderClasses=False,\n        lengthMenu=[[10, 25, 50, -1], [10, 25, 50, \"All\"]],\n    )\n\n    context = {\n        'dams_table': dams_table,\n        'can_add_dams': has_permission(request, 'add_dams')\n    }\n\n    return render(request, 'dam_inventory/list_dams.html', context)\n\n\n\n@login_required()\ndef assign_hydrograph(request):\n    \"\"\"\n    Controller for the Add Hydrograph page.\n    \"\"\"\n    # Get dams from database\n    Session = app.get_persistent_store_database('primary_db', as_sessionmaker=True)\n    session = Session()\n    all_dams = session.query(Dam).all()\n\n    # Defaults\n    dam_select_options = [(dam.name, dam.id) for dam in all_dams]\n    selected_dam = None\n    hydrograph_file = None\n\n    # Errors\n    dam_select_errors = ''\n    hydrograph_file_error = ''\n\n    # Case where the form has been submitted\n    if request.POST and 'add-button' in request.POST:\n        # Get Values\n        has_errors = False\n        selected_dam = request.POST.get('dam-select', None)\n\n        if not selected_dam:\n            has_errors = True\n            dam_select_errors = 'Dam is Required.'\n\n        # Get File\n        if request.FILES and 'hydrograph-file' in request.FILES:\n            # Get a list of the files\n            hydrograph_file = request.FILES.getlist('hydrograph-file')\n\n        if not hydrograph_file and len(hydrograph_file) > 0:\n            has_errors = True\n            hydrograph_file_error = 'Hydrograph File is Required.'\n\n        if not has_errors:\n            # Process file here\n            success = assign_hydrograph_to_dam(selected_dam, hydrograph_file[0])\n\n            # Provide feedback to user\n            if success:\n                messages.info(request, 'Successfully assigned hydrograph.')\n            else:\n                messages.info(request, 'Unable to assign hydrograph. Please try again.')\n            return redirect(reverse('dam_inventory:home'))\n\n        messages.error(request, \"Please fix errors.\")\n\n    dam_select_input = SelectInput(\n        display_text='Dam',\n        name='dam-select',\n        multiple=False,\n        options=dam_select_options,\n        initial=selected_dam,\n        error=dam_select_errors\n    )\n\n    add_button = Button(\n        display_text='Add',\n        name='add-button',\n        icon='glyphicon glyphicon-plus',\n        style='success',\n        attributes={'form': 'add-hydrograph-form'},\n        submit=True\n    )\n\n    cancel_button = Button(\n        display_text='Cancel',\n        name='cancel-button',\n        href=reverse('dam_inventory:home')\n    )\n\n    context = {\n        'dam_select_input': dam_select_input,\n        'hydrograph_file_error': hydrograph_file_error,\n        'add_button': add_button,\n        'cancel_button': cancel_button,\n        'can_add_dams': has_permission(request, 'add_dams')\n    }\n\n    session.close()\n\n    return render(request, 'dam_inventory/assign_hydrograph.html', context)\n\n\n@login_required()\ndef hydrograph(request, hydrograph_id):\n    \"\"\"\n    Controller for the Hydrograph Page.\n    \"\"\"\n    hydrograph_plot = create_hydrograph(hydrograph_id)\n\n    context = {\n        'hydrograph_plot': hydrograph_plot,\n        'can_add_dams': has_permission(request, 'add_dams')\n    }\n    return render(request, 'dam_inventory/hydrograph.html', context)\n\n@login_required()\ndef hydrograph_ajax(request, dam_id):\n    \"\"\"\n    Controller for the Hydrograph Page.\n    \"\"\"\n    #Get dam from database\n    Session = app.get_persistent_store_database('primary_db', as_sessionmaker=True)\n    session = Session()\n    dam = session.query(Dam).get(int(dam_id))\n\n    if dam.hydrograph:\n        hydrograph_plot = create_hydrograph(dam.hydrograph.id, height='300px')\n    else:\n        hydrograph_plot = None\n\n    context = {\n        'hydrograph_plot': hydrograph_plot,\n    }\n\n    session.close()\n    return render(request, 'dam_inventory/hydrograph_ajax.html', context)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tethysapp-dam_inventory/tethysapp/dam_inventory/controllers.py	(revision 6a19c228266a104d8322c8e1e8bbe96fbab4f433)
+++ tethysapp-dam_inventory/tethysapp/dam_inventory/controllers.py	(date 1593468189391)
@@ -6,10 +6,12 @@
                                SelectInput, DataTableView, MVDraw, MVView,
                                MVLayer)
 from tethys_sdk.permissions import permission_required, has_permission
-from tethys_sdk.workspaces import app_workspace
+from tethys_sdk.workspaces import app_workspace, user_workspace
 from .model import add_new_dam, get_all_dams, Dam, assign_hydrograph_to_dam, get_hydrograph
 from .app import DamInventory as app
 from .helpers import create_hydrograph
+import os
+from tethys_sdk.quotas import enforce_quota
 
 
 
@@ -119,6 +121,7 @@
     return render(request, 'dam_inventory/home.html', context)
 
 
+@enforce_quota('user_dam_quota')
 @permission_required('add_dams')
 def add_dam(request):
     """
@@ -177,10 +180,18 @@
             Session = app.get_persistent_store_database('primary_db', as_sessionmaker=True)
             session = Session()
             num_dams = session.query(Dam).count()
+            user_id = request.user.id
 
             # Only add the dam if custom setting doesn't exist or we have not exceed max_dams
             if not max_dams or num_dams < max_dams:
-                add_new_dam(location=location, name=name, owner=owner, river=river, date_built=date_built)
+                add_new_dam(
+                    location=location,
+                    name=name,
+                    owner=owner,
+                    river=river,
+                    date_built=date_built,
+                    user_id=user_id
+                )
             else:
                 messages.warning(request, 'Unable to add dam "{0}", because the inventory is full.'.format(name))
 
@@ -317,16 +328,16 @@
     return render(request, 'dam_inventory/list_dams.html', context)
 
 
-
+@user_workspace
 @login_required()
-def assign_hydrograph(request):
+def assign_hydrograph(request, user_workspace):
     """
     Controller for the Add Hydrograph page.
     """
     # Get dams from database
     Session = app.get_persistent_store_database('primary_db', as_sessionmaker=True)
     session = Session()
-    all_dams = session.query(Dam).all()
+    all_dams = session.query(Dam).filter(Dam.user_id == request.user.id)
 
     # Defaults
     dam_select_options = [(dam.name, dam.id) for dam in all_dams]
@@ -358,7 +369,20 @@
 
         if not has_errors:
             # Process file here
-            success = assign_hydrograph_to_dam(selected_dam, hydrograph_file[0])
+            hydrograph_file = hydrograph_file[0]
+            success = assign_hydrograph_to_dam(selected_dam, hydrograph_file)
+
+            # Remove csv related to dam if exists
+            for file in os.listdir(user_workspace.path):
+                if file.startswith("{}_".format(selected_dam)):
+                    os.remove(os.path.join(user_workspace.path, file))
+
+            # Write csv to user_workspace to test workspace quota functionality
+            full_filename = "{}_{}".format(selected_dam, hydrograph_file.name)
+            with open(os.path.join(user_workspace.path, full_filename), 'wb+') as destination:
+                for chunk in hydrograph_file.chunks():
+                    destination.write(chunk)
+                destination.close()
 
             # Provide feedback to user
             if success:
Index: tethysapp-dam_inventory/tethysapp_dam_inventory.egg-info/SOURCES.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>setup.py\ntethysapp/dam_inventory/__init__.py\ntethysapp/dam_inventory/app.py\ntethysapp/dam_inventory/controllers.py\ntethysapp/dam_inventory/handoff.py\ntethysapp/dam_inventory/helpers.py\ntethysapp/dam_inventory/model.py\ntethysapp/dam_inventory/tests/_init_.py\ntethysapp/dam_inventory/tests/tests.py\ntethysapp_dam_inventory.egg-info/PKG-INFO\ntethysapp_dam_inventory.egg-info/SOURCES.txt\ntethysapp_dam_inventory.egg-info/dependency_links.txt\ntethysapp_dam_inventory.egg-info/not-zip-safe\ntethysapp_dam_inventory.egg-info/top_level.txt
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tethysapp-dam_inventory/tethysapp_dam_inventory.egg-info/SOURCES.txt	(revision 6a19c228266a104d8322c8e1e8bbe96fbab4f433)
+++ tethysapp-dam_inventory/tethysapp_dam_inventory.egg-info/SOURCES.txt	(date 1593468189412)
@@ -2,6 +2,7 @@
 tethysapp/dam_inventory/__init__.py
 tethysapp/dam_inventory/app.py
 tethysapp/dam_inventory/controllers.py
+tethysapp/dam_inventory/dam_quota_handler.py
 tethysapp/dam_inventory/handoff.py
 tethysapp/dam_inventory/helpers.py
 tethysapp/dam_inventory/model.py
